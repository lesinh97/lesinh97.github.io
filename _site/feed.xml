<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2019-01-23T00:01:46+07:00</updated><id>/</id><title type="html">Le d.Sinh</title><subtitle>Jekyll version of the Massively theme by HTML5UP</subtitle><entry><title type="html">iptables-based custom Firewall</title><link href="/blog/iptables-firewall/" rel="alternate" type="text/html" title="iptables-based custom Firewall" /><published>2018-12-20T00:00:00+07:00</published><updated>2018-12-20T00:00:00+07:00</updated><id>/blog/iptables-firewall</id><content type="html" xml:base="/blog/iptables-firewall/">&lt;h2 id=&quot;what-is-firewall&quot;&gt;What is Firewall?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;References from Cisco Network.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A firewall is a network security device that monitors incoming and outgoing network traffic and decides whether to allow or block specific traffic based on a defined set of security rules.&lt;/p&gt;

&lt;p&gt;Firewalls have been a first line of defense in network security for over 25 years. They establish a barrier between secured and controlled internal networks that can be trusted and untrusted outside networks, such as the Internet.&lt;/p&gt;

&lt;p&gt;A firewall can be hardware, software, or both.&lt;/p&gt;

&lt;h2 id=&quot;some-attack-technique&quot;&gt;Some attack technique…&lt;/h2&gt;

&lt;p&gt;The facts that these lines of code are very simple and its just what I’ve learnt in university.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;IP spoofing.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 224.0.0.0/3 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 169.254.0.0/16 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 172.16.0.0/12 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 192.0.2.0/24 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 192.168.0.0/16 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 10.0.0.0/8 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 0.0.0.0/8 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 240.0.0.0/5 -j DROP 
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -t mangle -A PREROUTING -s 127.0.0.0/8 ! -i lo -j DROP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We both have known about these useless address, so?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Steath scan (TCP/SYN).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The never-closed 3 way hand-shake should be stop by scan the lonely packet in our pipeline&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags SYN,ACK SYN,ACK -m state --state NEW -j STEALTH_SCAN

&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN         -j STEALTH_SCAN
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST         -j STEALTH_SCAN
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j STEALTH_SCAN

&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j STEALTH_SCAN
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags ACK,FIN FIN     -j STEALTH_SCAN
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags ACK,PSH PSH     -j STEALTH_SCAN
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -p tcp --tcp-flags ACK,URG URG     -j STEALTH_SCAN
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Ping flood (ICPM flood)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you’ve known, ICMP has many types, but we will focus on 0 3 4 8 11.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;OK_ICMP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;amp;quot;0 3 4 8 11&amp;amp;quot;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;item &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$OK_ICMP&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -i &lt;span class=&quot;nv&quot;&gt;$IF&lt;/span&gt; -s &lt;span class=&quot;nv&quot;&gt;$NET&lt;/span&gt; -p icmp --icmp-type &lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt; -j ACCEPT
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A OUTPUT -o &lt;span class=&quot;nv&quot;&gt;$IF&lt;/span&gt; -s &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; -p icmp --icmp-type &lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt; -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But wait! The counter-ICMP flood solution is all around the Internet. So I just wanna tell you about the Half-Counter, the method that maybe useful or become an ugly depend on the condition.&lt;/p&gt;

&lt;p&gt;The main point is, remember about what makes a flood? A ping packet! So that the size of the packet has it limit! Read carefully these codes below and use your brain :))&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A INPUT -i &lt;span class=&quot;nv&quot;&gt;$IF&lt;/span&gt; -s &lt;span class=&quot;nv&quot;&gt;$NET&lt;/span&gt; -p icmp --icmp-type &lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt; -m length 42:43 -m limit --limit 1/s --limit-burst 1 -j ACCEPT
&lt;span class=&quot;nv&quot;&gt;$iptables&lt;/span&gt; -A OUTPUT -o &lt;span class=&quot;nv&quot;&gt;$IF&lt;/span&gt; -s &lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; -p icmp --icmp-type &lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt; -m length 42:43 -m limit --limit 1/s --limit-burst 1 -j ACCEPT
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Wow, magic~~!&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP DDoS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The very first attack that must be countered when design any Firewall. So the point is, you have to know about the “&lt;strong&gt;Use it or lose it&lt;/strong&gt;” theory. In my opinion, &lt;em&gt;network administrator&lt;/em&gt; must define what this Server is used for? So, give user a number of limited ticket to gain everything in your server with the defined-time. So, the solution is here. &lt;strong&gt;Magiccc :)))&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here the &lt;strong&gt;s1mple&lt;/strong&gt; way to understand ticket&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/http_ticket.png&quot; alt=&quot;Thing that have unlimted power&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;thing-to-remember&quot;&gt;Thing to remember&lt;/h2&gt;

&lt;p&gt;In my opinion, to create a good firewall, you firstly need to have knowledge about these attacks above. Beside, you have to keep in my the iptables cheat sheets.&lt;/p&gt;

&lt;h3 id=&quot;iptables-common-arguments&quot;&gt;iptables common arguments&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Prefixs&lt;/th&gt;
      &lt;th&gt;Features&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;-A,–append&lt;/td&gt;
      &lt;td&gt;Add one or more new rules to the specified chain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-D,–delete&lt;/td&gt;
      &lt;td&gt;Delete one or more rules from specified chain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-P, –policy&lt;/td&gt;
      &lt;td&gt;Set policy of designated chain to specified target&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-N, –new-chain&lt;/td&gt;
      &lt;td&gt;Create a new user-defined chain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-X, –delete-chain&lt;/td&gt;
      &lt;td&gt;Delete specified user-defined chain&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-F&lt;/td&gt;
      &lt;td&gt;Table initialization&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-p, –protocol&lt;/td&gt;
      &lt;td&gt;Specify protocol protocol (tcp, udp, icmp, all)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-s,  - source IP address [/ mask]&lt;/td&gt;
      &lt;td&gt;Source address. Describe IP address or host name&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-d, - destination IP address [/ mask]&lt;/td&gt;
      &lt;td&gt;Address of the destination. Describe IP address or host name&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-i , - in - interface&lt;/td&gt;
      &lt;td&gt;Specifies the interface on which the device packet comes in&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-o, - out - interface&lt;/td&gt;
      &lt;td&gt;Specify the interface on which the device packet appears&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-j, –jump&lt;/td&gt;
      &lt;td&gt;Specify action when matching target condition&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-t, –table&lt;/td&gt;
      &lt;td&gt;Specify table table&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-m state - state state&lt;/td&gt;
      &lt;td&gt;Specify condition of packet as condition&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;!&lt;/td&gt;
      &lt;td&gt;Invert the condition (except for ~)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;repository&quot;&gt;Repository&lt;/h2&gt;

&lt;p&gt;Follow my &lt;a href=&quot;https://github.com/lesinh97/Firewall-Sem7&quot;&gt;repository&lt;/a&gt;. Feel free to create a pull request at anytime! ^_^&lt;/p&gt;</content><summary type="html">Line of rules to rule the Internet world.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/Firewall-and-Router-Management.png" /></entry><entry><title type="html">Arduino RFID time attendance</title><link href="/blog/RFID-Attendance/" rel="alternate" type="text/html" title="Arduino RFID time attendance " /><published>2018-12-12T00:00:00+07:00</published><updated>2018-12-12T00:00:00+07:00</updated><id>/blog/RFID-Attendance</id><content type="html" xml:base="/blog/RFID-Attendance/">&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;
&lt;p&gt;I just wanna make a private doorlock and tracking system in my personal room. And maybe in the following time period, I can extend this project to a huge project that can be implemented in a such large places like a company’s entrance door and so on.&lt;/p&gt;

&lt;h2 id=&quot;what-we-need&quot;&gt;What we need&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Uno R3 or whatever
RFID RC522 module
DS3231 RTC module
MicroSD card module
Jump wires
12V DC Solenoid Doorlock
N-Mosfet
A big big brain
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;which-problems-will-we-faces&quot;&gt;Which problems will we faces?&lt;/h3&gt;
&lt;p&gt;Something will happen in the very first time you run this circuit. That RFID module cannot read and write anything, either microSd card module.
The reason is about a China-exported circuit, microSD module. In my point of view that this apdater is so selfish, it will take all the MISO line in your SPI bus. Whatever, you must tell this brainless circuit to settled down.&lt;/p&gt;

&lt;p&gt;Gentlely put 270~330 Ohm resistor in the MISO line came from this apdater, everything will work fine.
Here the solution&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;/images/time-attendance-1.jpg&quot; alt=&quot;wow&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&quot;breadboard&quot;&gt;Breadboard&lt;/h3&gt;

&lt;p&gt;&lt;span style=&quot;display:block;text-align:center&quot;&gt;&lt;img src=&quot;/images/rfid-rc522_bb.jpg&quot; alt=&quot;wow&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;Follow my &lt;a href=&quot;https://www.google.com&quot;&gt;repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google my work &lt;a href=&quot;https://github.com/lesinh97/Arduino-Sketch&quot;&gt;at&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have fun! ^_^&lt;/p&gt;</content><summary type="html">RFID, RTC module and more!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/time-attendance.jpg" /></entry><entry><title type="html">Linux memory management principles</title><link href="/blog/Linux-memory-management/" rel="alternate" type="text/html" title="Linux memory management principles" /><published>2017-12-29T00:00:00+07:00</published><updated>2017-12-29T00:00:00+07:00</updated><id>/blog/Linux-memory-management</id><content type="html" xml:base="/blog/Linux-memory-management/">&lt;h2 id=&quot;sorry-im-still-thinkin-about-what-to-share-comeback-later-d&quot;&gt;Sorry! I’m still thinkin’ about what to share. Comeback later! :D&lt;/h2&gt;</content><summary type="html">malloc, calloc, copy-on-write....</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/images/linux-mem.jpg" /></entry></feed>
